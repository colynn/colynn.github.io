<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基础手册 on Colynn.Liu</title><link>https://colynn.github.io/categories/%E5%9F%BA%E7%A1%80%E6%89%8B%E5%86%8C/</link><description>Recent content in 基础手册 on Colynn.Liu</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 15 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://colynn.github.io/categories/%E5%9F%BA%E7%A1%80%E6%89%8B%E5%86%8C/index.xml" rel="self" type="application/rss+xml"/><item><title>python 语法汇总</title><link>https://colynn.github.io/2019-07-26-basic_knowledge_summarizing/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-07-26-basic_knowledge_summarizing/</guid><description>&lt;h3 id="列表与元组的区别">列表与元组的区别；&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>语法差异：声名方式不同&lt;/strong> 第一个不同点是元组的声明使用小括号，而列表使用方括号，当声明只有一个元素的元组时，需要在这个元素的后面添加英文逗号；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不可修改类型&lt;/strong> 第二个不同点是元组声明和赋值后，不能像列表一样添加、删除和修改元素，也就是说元组在程序运行过程中不能被修改,无法复制。&lt;/p></description></item><item><title>Go 语法汇总 - Block</title><link>https://colynn.github.io/2019-12-31-go_basic_knowledge_summarizing/</link><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-12-31-go_basic_knowledge_summarizing/</guid><description>&lt;h2 id="变量声明">变量声明&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>指定变量类型，如果没有初始化，则变量默认为零值;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">import&lt;/span> &lt;span style="background-color:#fff0f0">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">func&lt;/span> &lt;span style="color:#06b;font-weight:bold">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">// 声明一个变量并初始化&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">var&lt;/span> a = &lt;span style="background-color:#fff0f0">&amp;#34;RUNOOB&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#06b;font-weight:bold">Println&lt;/span>(a)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">// 没有初始化就为零值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">var&lt;/span> b &lt;span style="color:#339;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#06b;font-weight:bold">Println&lt;/span>(b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#888">// bool 零值为 false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">var&lt;/span> c &lt;span style="color:#339;font-weight:bold">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#06b;font-weight:bold">Println&lt;/span>(c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>根据值自行判定变量类型&lt;/p></description></item><item><title>JS语法知识汇总</title><link>https://colynn.github.io/2019-08-19-js_base_summaring/</link><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-08-19-js_base_summaring/</guid><description>&lt;h2 id="数据类型">数据类型&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">var&lt;/span> length &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#00d;font-weight:bold">7&lt;/span>; &lt;span style="color:#888">// 数字
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#080;font-weight:bold">var&lt;/span> lastName &lt;span style="color:#333">=&lt;/span> &lt;span style="background-color:#fff0f0">&amp;#34;Gates&amp;#34;&lt;/span>; &lt;span style="color:#888">// 字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#080;font-weight:bold">var&lt;/span> cars &lt;span style="color:#333">=&lt;/span> [&lt;span style="background-color:#fff0f0">&amp;#34;Porsche&amp;#34;&lt;/span>, &lt;span style="background-color:#fff0f0">&amp;#34;Volvo&amp;#34;&lt;/span>, &lt;span style="background-color:#fff0f0">&amp;#34;BMW&amp;#34;&lt;/span>]; &lt;span style="color:#888">// 数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#080;font-weight:bold">var&lt;/span> x &lt;span style="color:#333">=&lt;/span> {firstName&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#34;Bill&amp;#34;&lt;/span>, lastName&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#34;Gates&amp;#34;&lt;/span>}; &lt;span style="color:#888">// 对象 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#080;font-weight:bold">var&lt;/span> x &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">true&lt;/span>; &lt;span style="color:#888">// 布尔值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#080;font-weight:bold">var&lt;/span> y &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">false&lt;/span>; &lt;span style="color:#888">//布尔值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="数组-some">数组 some&lt;/h3>
&lt;p>The &lt;code>some()&lt;/code> method checks if any of the elements in an array pass a test (provided as a function).&lt;/p>
&lt;p>The &lt;code>some()&lt;/code> method executes the function once for each element present in the array:&lt;/p>
&lt;p>If it finds an array element where the function returns a true value, some() returns &lt;code>true&lt;/code> (and does not check the remaining values)
Otherwise it returns &lt;code>false&lt;/code>
&lt;strong>Note:&lt;/strong> some() does not execute the function for array elements without values.&lt;/p></description></item></channel></rss>