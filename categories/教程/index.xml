<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>教程 on Colynn.Liu</title><link>https://colynn.github.io/categories/%E6%95%99%E7%A8%8B/</link><description>Recent content in 教程 on Colynn.Liu</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 15 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://colynn.github.io/categories/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>K8s常用命令备注手册</title><link>https://colynn.github.io/2020-11-04-kubernetes-cheat-sheet/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-11-04-kubernetes-cheat-sheet/</guid><description>&lt;h2 id="pod">Pod&lt;/h2>
&lt;ol>
&lt;li>pod 进入指定的 container&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888"># Name of the container: kaniko&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888"># Name of the pod: jnlp-gjrpc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl &lt;span style="color:#007020">exec&lt;/span> -ti jnlp-gjrpc -c kaniko /bin/sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>强制删除 pod&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl delete pods mypod-ba97bc8ef-8rgaa --grace-period&lt;span style="color:#333">=&lt;/span>&lt;span style="color:#60e;font-weight:bold">0&lt;/span> --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="label">Label&lt;/h2>
&lt;ol>
&lt;li>create a label for a node:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl label node &amp;lt;nodename&amp;gt; &amp;lt;labelname&amp;gt;&lt;span style="color:#333">=&lt;/span>&amp;lt;value&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>delete above labels from its node&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl label node &amp;lt;nodename&amp;gt; &amp;lt;labelname&amp;gt;-
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>confirm node labels&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl get nodes --show-labels
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="helm">Helm&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>helm get --revision &lt;span style="color:#60e;font-weight:bold">0&lt;/span> engine-realtime-clustering-service-nebula | head
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>vue 使用中的汇总</title><link>https://colynn.github.io/2020-06-01-vue-in-using-summaring/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-06-01-vue-in-using-summaring/</guid><description>&lt;h1 id="vue-生命周期">Vue 生命周期&lt;/h1>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/5203608/89412164-2e798b00-d759-11ea-82b8-324f3d18e5e4.png" alt="image">&lt;/p>
&lt;h1 id="vue-路由">Vue 路由&lt;/h1>
&lt;h2 id="1-vue-路由跳转方式">1. Vue 路由跳转方式&lt;/h2>
&lt;h3 id="1-router-link">1. router-link&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60e;font-weight:bold">1.&lt;/span>不带参数
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#333">&amp;lt;&lt;/span>router&lt;span style="color:#333">-&lt;/span>link &lt;span style="color:#333">:&lt;/span>to&lt;span style="color:#333">=&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#34;{name:&amp;#39;home&amp;#39;}&amp;#34;&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#333">&amp;lt;&lt;/span>router&lt;span style="color:#333">-&lt;/span>link &lt;span style="color:#333">:&lt;/span>to&lt;span style="color:#333">=&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#34;{path:&amp;#39;/home&amp;#39;}&amp;#34;&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span> &lt;span style="color:#888">//name,path都行, 建议用name 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// 注意：router-link中链接如果是&amp;#39;/&amp;#39;开始就是从根路由开始，如果开始不带&amp;#39;/&amp;#39;，则从当前路由开始。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60e;font-weight:bold">2.&lt;/span>带参数
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#333">&amp;lt;&lt;/span>router&lt;span style="color:#333">-&lt;/span>link &lt;span style="color:#333">:&lt;/span>to&lt;span style="color:#333">=&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#34;{name:&amp;#39;home&amp;#39;, params: {id:1}}&amp;#34;&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// params传参数 (类似post)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// 路由配置 path: &amp;#34;/home/:id&amp;#34; 或者 path: &amp;#34;/home:id&amp;#34; 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// 不配置path ,第一次可请求,刷新页面id会消失
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// 配置path,刷新页面id会保留
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// html 取参 $route.params.id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// script 取参 this.$route.params.id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#333">&amp;lt;&lt;/span>router&lt;span style="color:#333">-&lt;/span>link &lt;span style="color:#333">:&lt;/span>to&lt;span style="color:#333">=&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#34;{name:&amp;#39;home&amp;#39;, query: {id:1}}&amp;#34;&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// query传参数 (类似get,url后面会显示参数)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// 路由可不配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// html 取参 $route.query.id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// script 取参 this.$route.query.id
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-thisrouterpush-函数里面调用">2. this.$router.push() (函数里面调用)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60e;font-weight:bold">1.&lt;/span>不带参数
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">this&lt;/span>.$router.push(&lt;span style="background-color:#fff0f0">&amp;#39;/home&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">this&lt;/span>.$router.push({name&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#39;home&amp;#39;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">this&lt;/span>.$router.push({path&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#39;/home&amp;#39;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60e;font-weight:bold">2.&lt;/span> query传参 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">this&lt;/span>.$router.push({name&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#39;home&amp;#39;&lt;/span>,query&lt;span style="color:#333">:&lt;/span> {id&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#39;1&amp;#39;&lt;/span>}})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">this&lt;/span>.$router.push({path&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#39;/home&amp;#39;&lt;/span>,query&lt;span style="color:#333">:&lt;/span> {id&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#39;1&amp;#39;&lt;/span>}})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// html 取参 $route.query.id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// script 取参 this.$route.query.id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#60e;font-weight:bold">3.&lt;/span> params传参
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">this&lt;/span>.$router.push({name&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#39;home&amp;#39;&lt;/span>,params&lt;span style="color:#333">:&lt;/span> {id&lt;span style="color:#333">:&lt;/span>&lt;span style="background-color:#fff0f0">&amp;#39;1&amp;#39;&lt;/span>}}) &lt;span style="color:#888">// 只能用 name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// 路由配置 path: &amp;#34;/home/:id&amp;#34; 或者 path: &amp;#34;/home:id&amp;#34; ,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// 不配置path ,第一次可请求,刷新页面id会消失
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// 配置path,刷新页面id会保留
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// html 取参 $route.params.id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">// script 取参 this.$route.params.id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60e;font-weight:bold">4.&lt;/span> query和params区别
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>query类似 get, 跳转之后页面 url后面会拼接参数,类似&lt;span style="color:#333">?&lt;/span>id&lt;span style="color:#333">=&lt;/span>&lt;span style="color:#00d;font-weight:bold">1&lt;/span>, 非重要性的可以这样传, 密码之类还是用params刷新页面id还在
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>params类似 post, 跳转之后页面 url后面不会拼接参数 , 但是刷新页面id 会消失
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3--thisrouterreplace-用法同上push">3. this.$router.replace() (用法同上,push)&lt;/h3>
&lt;h3 id="4--thisroutergon">4. this.$router.go(n)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">this&lt;/span>.$router.go(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>向前或者向后跳转n个页面&lt;span style="color:#f00;background-color:#faa">，&lt;/span>n可为正整数或负整数
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>this.$router.push&lt;/code> 跳转到指定url路径，并想history栈中添加一个记录，点击后退会返回到上一个页面&lt;/p></description></item><item><title>Jwt web token - What &amp; How &amp; FAQ</title><link>https://colynn.github.io/2020-05-25-jwt-auth/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-05-25-jwt-auth/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>JSON Web Token是符合&lt;a href="https://tools.ietf.org/html/rfc7519">RFC7519&lt;/a>标准的开放式行业标准方法，用于在双方之间安全地表示声明。&lt;/p>
&lt;h2 id="what-is-jwt">What is Jwt&lt;/h2>
&lt;p>Jwt可以分为三个部分, &lt;code>header&lt;/code>, &lt;code>payload&lt;/code>, &lt;code>signature&lt;/code>， 它们之前通过&lt;code>.&lt;/code>来分隔.&lt;/p>
&lt;ul>
&lt;li>&lt;code>HEADER&lt;/code> 描述生成&lt;code>signature&lt;/code>的具体算法。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00;background-color:#faa">“alg”:&lt;/span> &lt;span style="color:#f00;background-color:#faa">“HS256”,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00;background-color:#faa">“typ”:&lt;/span> &lt;span style="color:#f00;background-color:#faa">“JWT”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>PAYLOAD&lt;/code> 所有的Jwt验证的声明都存储在这里。&lt;/p></description></item><item><title>Go Slice 内部发生了什么</title><link>https://colynn.github.io/2020-05-06-slice-internal/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-05-06-slice-internal/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Go&amp;rsquo;s Slice类型为处理类型化数据序列提供了一种方便且高效的方法。&lt;/p>
&lt;h2 id="slice-internals">Slice internals&lt;/h2>
&lt;p>slice是一个array片段的描述符，它包含一个指向数组的指针，版本的长度，还有它的容量。&lt;/p></description></item><item><title>kubernetes-网络组件-flannel-calico</title><link>https://colynn.github.io/2020-04-10-kubernetes-networking-flannel-calico/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-04-10-kubernetes-networking-flannel-calico/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>网络是kubernetes核心组件， 但是理解它具体是怎样工作却有一定挑战性，主要有4个不同的网络问题要解决：&lt;/p>
&lt;ol>
&lt;li>高度耦合的容器到容器通信：这可以通过&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod/">pods&lt;/a>和localhost通信解决。&lt;/li>
&lt;li>Pod与Pod之间的通信；&lt;/li>
&lt;li>Pod与Service间的通信, &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/">services&lt;/a>；&lt;/li>
&lt;li>外部和 Service间的通信，&lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/">services&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>无论是哪种网络插件，kubernets都要求其满足如下的基础要求。&lt;/p></description></item><item><title>VXLAN是什么及如何在容器间通信</title><link>https://colynn.github.io/2020-04-02-vxlan-is-what/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-04-02-vxlan-is-what/</guid><description>&lt;h2 id="引言">引言&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>服务器虚拟化对于物理网络基础设施提出了更高的要求，一个物理服务器多个VMs并且每一个vm归有一个自己的Meida Access Control(MAC)地址. 在交换式以太网中为了应对在成百上千的VMs中可能存在的通信连接， 需要较大的MAC地址表。&lt;/p></description></item><item><title>如何让你的 Go 代码更规范 - 辅助工具/项目结构/代码规范</title><link>https://colynn.github.io/2020-03-29-golang-101/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-29-golang-101/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>应云而生的go语言，给我们带来了很多的不错的特性，但是如何让go代码更规范，更优雅，期望可以给你些许帮助。&lt;/p>
&lt;p>作者对于golang也是在不断学习中，文章章节主要基于&lt;a href="blog.golang.org">golang官方博客&lt;/a>、社区的收集及思考，如有不妥可以文末留言，期望您的斧正, 此文也会不断完善。&lt;/p></description></item><item><title>如何创建自己的github站点 - 站点模板选择/gittalk评论组件</title><link>https://colynn.github.io/2020-03-25-create-custom-github-website/</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-25-create-custom-github-website/</guid><description>&lt;h2 id="站点模板">站点模板&lt;/h2>
&lt;p>你可以根据&lt;a href="https://jekyllrb.com/docs/themes/">jekyllr themes&lt;/a>选择自己喜欢的模板， 或是创建自己的主题并可以让更多人使用它。&lt;/p>
&lt;h2 id="评论组件">评论组件&lt;/h2>
&lt;p>大多模板已经支持一些评论组件，&lt;code>disqus&lt;/code>/&lt;code>staticman&lt;/code>等，但是考虑到国内的网络环境，就接入了&lt;a href="https://github.com/gittalk">Gittalk&lt;/a>这个评论组件。&lt;/p></description></item><item><title>Using Makefile for Go - Go语言项目如何正确使用Makefile</title><link>https://colynn.github.io/2020-03-03-using_makefile/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-03-using_makefile/</guid><description>&lt;p>我们一直在用Go语言编写的HackerRank项目中的一个项目使用&lt;code>make&lt;/code>作为构建工具，并且效果良好。在这篇文章中，我将指出我们使用的&lt;code>GNU Make&lt;/code>的一些功能和复杂性，这些功能和复杂性最终提高了我们团队成员的整体生产力。&lt;/p></description></item><item><title>搭建npm私有镜像仓库</title><link>https://colynn.github.io/2019-11-29-npm_private_registry-setup/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-11-29-npm_private_registry-setup/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>当你的研发团队越来越大，或是你无法忍受node超慢的构建时你可以考虑继续读下去，给大家推荐一个基于&lt;a href="https://verdaccio.org/docs/en/what-is-verdaccio">Verdaccio&lt;/a>相对较完整的解决方案。&lt;/p>
&lt;p>由于环境的原因，我们直接去 &lt;code>npmjs.org&lt;/code> 下载就不要考虑了，可以将&lt;code>npm config set registry=https://registry.npm.taobao.org&lt;/code> 可以缓解一部分, 但是如果你有些自己公司定制的npm包如何在公司内分享呢，这个时候你就需要一个npm私服了.&lt;/p></description></item><item><title>Beego In Use</title><link>https://colynn.github.io/2020-03-03-beego_using/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-03-beego_using/</guid><description>&lt;h2 id="时区问题">时区问题&lt;/h2>
&lt;p>ORM 默认使用 time.Local 本地时区&lt;/p>
&lt;p>作用于 ORM 自动创建的时间
从数据库中取回的时间转换成 ORM 本地时间
如果需要的话，你也可以进行更改&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">// 设置为 UTC 时间
orm.DefaultTimeLoc = time.UTC
&lt;/code>&lt;/pre>&lt;p>ORM 在进行 RegisterDataBase 的同时，会获取数据库使用的时区，然后在 time.Time 类型存取时做相应转换，以匹配时间系统，从而保证时间不会出错。&lt;/p></description></item><item><title>Kubernetes CI/CD 基于开源组件的实践</title><link>https://colynn.github.io/2019-10-22-kubernetes-ci-cd/</link><pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-10-22-kubernetes-ci-cd/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>应对敏捷开发的需求，对CI(持续集成))/CD（持续交付）的提出了更高的标准，今天来讨论下，如何基于开源组件（gitlab/jenkins/harbor/kubernetes）使用CI/CD，赋能团队的开发、运维。&lt;/p></description></item><item><title>VSCode 开发环境设置(go python)</title><link>https://colynn.github.io/2019-09-26-vscode_env_setting/</link><pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-09-26-vscode_env_setting/</guid><description>&lt;h1 id="运行环境">运行环境&lt;/h1>
&lt;ul>
&lt;li>Mac OS 10.13.6&lt;/li>
&lt;li>VS code 1.31.1&lt;/li>
&lt;/ul>
&lt;h1 id="快捷键">快捷键&lt;/h1>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/5203608/89495603-34b84780-d7eb-11ea-94b5-d48d3480b679.png" alt="image">&lt;/p>
&lt;h2 id="解读">解读&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>General&lt;/p>
&lt;ul>
&lt;li>Command + Shift + p, F1 显示命令面板&lt;/li>
&lt;li>Command + p 快速打开&lt;/li>
&lt;li>Command + Shite + N 新建vscode 窗口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Integrated Terminal&lt;/p>
&lt;ul>
&lt;li>Ctrl + ` 显示或隐藏集成终端；&lt;/li>
&lt;li>Ctrl + Shift + ` 新建终端；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>navigation&lt;/p></description></item><item><title>Mac-PHP环境准备</title><link>https://colynn.github.io/2019-03-05-mac_prepare_php_env/</link><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-03-05-mac_prepare_php_env/</guid><description>&lt;h3 id="前置条件">前置条件&lt;/h3>
&lt;ol>
&lt;li>Mac OS 10.13.6&lt;/li>
&lt;li>安装Homebrew 包管理工具；&lt;/li>
&lt;li>安装 autoconf (解决xdebug编译依赖问题)&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>说明&lt;/strong>: brew 全称Homebrew, 是Mac OSX上的软件包管理工具&lt;/p>
&lt;p>&lt;em>注&lt;/em>: PECL（The PHP Extension Community Library）是 PHP 扩展的存储库，为 PHP所有的扩展提供提供托管和下载服务。
通过 PEAR的 Package Manager 的安装管理方式，可以对PECL扩展进行下载和安装&lt;/p></description></item><item><title>安装 MiniKube</title><link>https://colynn.github.io/2019-02-13-install_minikube/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-02-13-install_minikube/</guid><description>&lt;h3 id="前置条件">前置条件&lt;/h3>
&lt;ul>
&lt;li>mac os 10.13.6&lt;/li>
&lt;li>Virtual Box&lt;/li>
&lt;/ul>
&lt;h4 id="确认环境需求">确认环境需求&lt;/h4>
&lt;p>Minikube 要求在 BIOS 中启用 VT-x / AMD-v 虚拟化， 要检查这是否在OSX / macOS上运行，请执行以下操作：&lt;/p>
&lt;pre tabindex="0">&lt;code>sysctl -a | grep machdep.cpu.features | grep VMX
&lt;/code>&lt;/pre>&lt;p>如果有输出，那你很棒棒！&lt;/p>
&lt;h4 id="配置brew-镜像源">配置Brew 镜像源&lt;/h4>
&lt;pre tabindex="0">&lt;code>cd &amp;#34;$(brew --repo)&amp;#34;
git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git

cd &amp;#34;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;#34;
git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git
&lt;/code>&lt;/pre>&lt;h3 id="相关软件安装">相关软件安装&lt;/h3>
&lt;ul>
&lt;li>kubectl&lt;/li>
&lt;li>docker (for Mac)&lt;/li>
&lt;li>minikube&lt;/li>
&lt;li>virtualbox&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>安装kubectl&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>$ brew update &amp;amp;&amp;amp; brew install kubectl
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>minikube(可以直接通过brew来安装)&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.30.0/minikube-darwin-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo mv minikube /usr/local/bin/
&lt;/code>&lt;/pre>&lt;p>&lt;em>注：&lt;/em> 可以从这里获得更多的版本选择 &lt;a href="https://github.com/kubernetes/minikube/releases">kuernetes minikube releases&lt;/a>&lt;/p></description></item><item><title>Shell命令备注手册</title><link>https://colynn.github.io/2019-01-02-shell-notes/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-01-02-shell-notes/</guid><description>&lt;h2 id="sed">Sed&lt;/h2>
&lt;h3 id="直接编辑文件">直接编辑文件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sed -i &lt;span style="background-color:#fff0f0">&amp;#39;s/abc/xxx/g&amp;#39;&lt;/span> file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sed -i &lt;span style="background-color:#fff0f0">&amp;#39;/$xxx.*$/d&amp;#39;&lt;/span> file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注&lt;/strong>: 仅仅工作在linux类型的主机上&lt;/p></description></item><item><title>运维常用命令备注手册</title><link>https://colynn.github.io/2019-01-01-ops-notes/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-01-01-ops-notes/</guid><description>&lt;h2 id="git">Git&lt;/h2>
&lt;h3 id="fork出来的仓库同步upstream">fork出来的仓库同步upstream&lt;/h3>
&lt;ol>
&lt;li>在 fork 的代码库中添加上游代码库的 remote 源&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git remote add upstream git@github.com:789/456.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>获取原始仓库分支和对应的提交&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git fetch upstream
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>在本地实现与upstream的同步&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git rebase upstream/master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>推送自己的本地仓库到自己的远程仓库&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="push-tags-to-remote">Push tags to remote&lt;/h3>
&lt;ul>
&lt;li>&lt;code>git push --tags &amp;lt;repo-name&amp;gt;&lt;/code> All refs under refs/tags are pushed, in addition to refspecs explicitly listed on the command line.&lt;/li>
&lt;/ul>
&lt;h3 id="delete-remote-tagsbranch">Delete remote tags/branch&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888"># more expressively, use the --delete option (or -d if your git version is older than 1.8.0)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push --delete origin tagname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p></description></item><item><title>PyCharm 开发环境设置</title><link>https://colynn.github.io/2019-09-26-pycharm_env_setting/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-09-26-pycharm_env_setting/</guid><description>&lt;h2 id="运行环境">运行环境&lt;/h2>
&lt;ul>
&lt;li>Mac OS 10.13.6&lt;/li>
&lt;li>PyCharm 2018.1&lt;/li>
&lt;/ul>
&lt;h3 id="确认代码检查规范">确认代码检查规范&lt;/h3>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/5203608/89404105-059ec900-d74c-11ea-8998-3d71a7cb8cdc.png" alt="image">&lt;/p>
&lt;h3 id="当前文件-快速格式化代码--option--command--l">当前文件-快速格式化代码 (option + command + l)&lt;/h3>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/5203608/89410539-7a770080-d756-11ea-9b42-b955c02185a9.png" alt="image">&lt;/p>
&lt;h3 id="代码注释方式---支持-google-restructuredtext-等">代码注释方式 - 支持 google/ reStructuredText 等&lt;/h3>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/5203608/89410596-97abcf00-d756-11ea-9348-e4a82cb59521.png" alt="image">&lt;/p>
&lt;h3 id="定义-文件代码模板">定义-文件/代码模板&lt;/h3>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/5203608/89410646-b4480700-d756-11ea-8fec-a49d70766852.png" alt="image">&lt;/p></description></item></channel></rss>