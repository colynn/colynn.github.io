<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Colynn.Liu</title><link>https://colynn.github.io/posts/</link><description>Recent content in Posts on Colynn.Liu</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 04 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://colynn.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>K8s常用命令备注手册</title><link>https://colynn.github.io/2020-11-04-kubernetes-cheat-sheet/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-11-04-kubernetes-cheat-sheet/</guid><description>Pod pod 进入指定的 container # Name of the container: kaniko # Name of the pod: jnlp-gjrpc $ kubectl exec -ti jnlp-gjrpc -c kaniko /bin/sh 强制删除 pod $ kubectl delete pods mypod-ba97bc8ef-8rgaa --grace-period=0 --force Label create a label for a node: $ kubectl label node &amp;lt;nodename&amp;gt; &amp;lt;labelname&amp;gt;=&amp;lt;value&amp;gt; delete above labels from its node $ kubectl label node &amp;lt;nodename&amp;gt; &amp;lt;labelname&amp;gt;- confirm node labels $ kubectl</description></item><item><title>持续的GitOps, 是时候启用了吗？</title><link>https://colynn.github.io/2020-09-21-gitops/</link><pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-09-21-gitops/</guid><description>前言 对于DevOps是不是大家均已经很熟悉，每论你的公司大与小也许你都已经存在了一个devops平台或是工具链，用来辅助环境配置、应用发布、</description></item><item><title>HTTP 协议 - 理解</title><link>https://colynn.github.io/2020-08-11-http-protocol/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-08-11-http-protocol/</guid><description>概述 Web 浏览器、服务器和相关的 Web应用程序都是通过 HTTP 相互通信的。HTTP是现代全球因特网中使用的公共语言。 HTTP使用的是可靠的数据传输协议</description></item><item><title>TCP/IP 协议</title><link>https://colynn.github.io/2020-08-11-tcp-ip/</link><pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-08-11-tcp-ip/</guid><description>基础知识 具体含义 利用IP进行通信时所必须用到的协议的统称。 具体来说，IP 或 ICMP、TCP或 UDP、 TELNET或是 FTP、HTTP 等都属于</description></item><item><title>npm使用过程中的报错记录</title><link>https://colynn.github.io/2020-06-19-npm-catch-error/</link><pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-06-19-npm-catch-error/</guid><description>1. 制做docker镜像时无法安装依赖 问题描述 比如你在package.json里指定了 对于本地包或是 git 包的依赖，然后你在本地直接打包(npm run</description></item><item><title>vue 使用中的汇总</title><link>https://colynn.github.io/2020-06-01-vue-in-using-summaring/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-06-01-vue-in-using-summaring/</guid><description>Vue 生命周期 Vue 路由 1. Vue 路由跳转方式 1. router-link 1.不带参数 &amp;lt;router-link :to=&amp;#34;{name:&amp;#39;home&amp;#39;}&amp;#34;&amp;gt; &amp;lt;router-link :to=&amp;#34;{path:&amp;#39;/home&amp;#39;}&amp;#34;&amp;gt; //name,path都行, 建议用name // 注意：router-link中链接如果是</description></item><item><title>Jwt web token - What &amp; How &amp; FAQ</title><link>https://colynn.github.io/2020-05-25-jwt-auth/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-05-25-jwt-auth/</guid><description>前言 JSON Web Token是符合RFC7519标准的开放式行业标准方法，用于在双方之间安全地表示声明。 What is Jwt Jwt可以分为三个部分, header, payload, signat</description></item><item><title>Go Slice 内部发生了什么</title><link>https://colynn.github.io/2020-05-06-slice-internal/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-05-06-slice-internal/</guid><description>前言 Go&amp;rsquo;s Slice类型为处理类型化数据序列提供了一种方便且高效的方法。 Slice internals slice是一个array片段的描述符，它包含一个指向数组的指针，版</description></item><item><title>Golang 内存分配 - stack and heap</title><link>https://colynn.github.io/2020-07-16-go-memory-allocation/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-07-16-go-memory-allocation/</guid><description>https://golang.org/doc/faq#stack_or_heap stack and pointers 我不能解释地像 William Kennedy一样优秀，那就让我来做一个汇总. 一个变量可以被分配在 heap或是stack: The stack contains the ongoing variables for a given goroutine. Once a function</description></item><item><title>kubernetes-网络组件-flannel-calico</title><link>https://colynn.github.io/2020-04-10-kubernetes-networking-flannel-calico/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-04-10-kubernetes-networking-flannel-calico/</guid><description>前言 网络是kubernetes核心组件， 但是理解它具体是怎样工作却有一定挑战性，主要有4个不同的网络问题要解决： 高度耦合的容器到容器通信：这</description></item><item><title>VXLAN是什么及如何在容器间通信</title><link>https://colynn.github.io/2020-04-02-vxlan-is-what/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-04-02-vxlan-is-what/</guid><description>引言 服务器虚拟化对于物理网络基础设施提出了更高的要求，一个物理服务器多个VMs并且每一个vm归有一个自己的Meida Access Control(MAC</description></item><item><title>如何让你的 Go 代码更规范 - 辅助工具/项目结构/代码规范</title><link>https://colynn.github.io/2020-03-29-golang-101/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-29-golang-101/</guid><description>前言 应云而生的go语言，给我们带来了很多的不错的特性，但是如何让go代码更规范，更优雅，期望可以给你些许帮助。 作者对于golang也是在不断</description></item><item><title>如何创建自己的github站点 - 站点模板选择/gittalk评论组件</title><link>https://colynn.github.io/2020-03-25-create-custom-github-website/</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-25-create-custom-github-website/</guid><description>站点模板 你可以根据jekyllr themes选择自己喜欢的模板， 或是创建自己的主题并可以让更多人使用它。 评论组件 大多模板已经支持一些评论组件</description></item><item><title>云原生距离我们有多远</title><link>https://colynn.github.io/2020-03-10-cloud-native-howfarawayfromus/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-10-cloud-native-howfarawayfromus/</guid><description>目录 何为云原生 云原生-容器编排kubernetes 云原生-DevOps方案 结论 引言 现在越来越多的企业上云，用云，但云原生离我们真的又有多远呢</description></item><item><title>Using Makefile for Go - Go语言项目如何正确使用Makefile</title><link>https://colynn.github.io/2020-03-03-using_makefile/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-03-using_makefile/</guid><description>我们一直在用Go语言编写的HackerRank项目中的一个项目使用make作为构建工具，并且效果良好。在这篇文章中，我将指出我们使用的GNU</description></item><item><title>tcpdump 介绍</title><link>https://colynn.github.io/2020-02-10-tcpdump/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-02-10-tcpdump/</guid><description>前言 tcpdump是一个命令行包分析工具，很像 wireshark, 你可以使用tcpdump抓包、分析包、连接问题的 troubleshoot，和查找网络层上潜在</description></item><item><title>搭建npm私有镜像仓库</title><link>https://colynn.github.io/2019-11-29-npm_private_registry-setup/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-11-29-npm_private_registry-setup/</guid><description>前言 当你的研发团队越来越大，或是你无法忍受node超慢的构建时你可以考虑继续读下去，给大家推荐一个基于Verdaccio相对较完整的解决方案</description></item><item><title>Beego In Use</title><link>https://colynn.github.io/2020-03-03-beego_using/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-03-beego_using/</guid><description>时区问题 ORM 默认使用 time.Local 本地时区 作用于 ORM 自动创建的时间 从数据库中取回的时间转换成 ORM 本地时间 如果需要的话，你也可以进行更改 // 设置为 UTC 时间 orm.DefaultTimeLoc = time.UTC ORM 在</description></item><item><title>Kubernetes CI/CD 基于开源组件的实践</title><link>https://colynn.github.io/2019-10-22-kubernetes-ci-cd/</link><pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-10-22-kubernetes-ci-cd/</guid><description>前言 应对敏捷开发的需求，对CI(持续集成))/CD（持续交付）的提出了更高的标准，今天来讨论下，如何基于开源组件（gitlab/jenkin</description></item><item><title>VSCode 开发环境设置(go python)</title><link>https://colynn.github.io/2019-09-26-vscode_env_setting/</link><pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-09-26-vscode_env_setting/</guid><description>运行环境 Mac OS 10.13.6 VS code 1.31.1 快捷键 解读 General Command + Shift + p, F1 显示命令面板 Command + p 快速打开 Command + Shite + N 新建vscode 窗口 Integrated Terminal Ctrl + ` 显示或隐藏集成终端； Ctrl + Shift + `</description></item><item><title>Kubespary 部署 Kubernetes 1.15.3 版本</title><link>https://colynn.github.io/2019-09-15-kubespray-deploy-k8s/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-09-15-kubespray-deploy-k8s/</guid><description>前置条件 熟悉linux基本命令 了解k8s基本概念 K8s master推荐配置 节点数量 推荐配置（vCPU/Memory/磁盘） 1-5 nodes 1C/4G/4G 6-10 nodes 2C/8G/32G 11-100 nodes 4C/16G/80G 101-250 nodes</description></item><item><title>Go Mod 包管理 &amp; 常见问题</title><link>https://colynn.github.io/2019-08-15-introducing_go_mod/</link><pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-08-15-introducing_go_mod/</guid><description>前言 In Go 1.11, a new tool has arrived. It&amp;rsquo;s called go mod. For those who don&amp;rsquo;t know what is that, I&amp;rsquo;ll tell you about it. One of the purposes of this tool is to get rid of $GOPATH, so you can git clone a Golang repository anywhere and work on it without worrying about $GOPATH at all. There are other purposes of course, such as simpler versioning and</description></item><item><title>python 语法汇总</title><link>https://colynn.github.io/2019-07-26-basic_knowledge_summarizing/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-07-26-basic_knowledge_summarizing/</guid><description>列表与元组的区别； 语法差异：声名方式不同 第一个不同点是元组的声明使用小括号，而列表使用方括号，当声明只有一个元素的元组时，需要在这个元素的后</description></item><item><title>Go 语法汇总 - Block</title><link>https://colynn.github.io/2019-12-31-go_basic_knowledge_summarizing/</link><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-12-31-go_basic_knowledge_summarizing/</guid><description>变量声明 指定变量类型，如果没有初始化，则变量默认为零值; package main import &amp;#34;fmt&amp;#34; func main() { // 声明一个变量并初始化 var a = &amp;#34;RUNOOB&amp;#34; fmt.Println(a) // 没有初始化就为零值 var b int fmt.Println(b) // bool 零值为</description></item><item><title>Mac-PHP环境准备</title><link>https://colynn.github.io/2019-03-05-mac_prepare_php_env/</link><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-03-05-mac_prepare_php_env/</guid><description>前置条件 Mac OS 10.13.6 安装Homebrew 包管理工具； 安装 autoconf (解决xdebug编译依赖问题) 说明: brew 全称Homebrew, 是Mac OSX上的软件包管</description></item><item><title>Charles 抓包（http/https）</title><link>https://colynn.github.io/2019-02-13-charles_capture_package/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-02-13-charles_capture_package/</guid><description>运行环境 Mac os 10.13.6 Ios 12.1.2(16C101) 下载安装 官网下载 注: 破解版麻请自行搜索下载 配置 Proxy -&amp;gt; Proxy Settings (根据需要调整配置，保存)； 注: 如果仅需要抓取http包，请略过后续</description></item><item><title>安装 MiniKube</title><link>https://colynn.github.io/2019-02-13-install_minikube/</link><pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-02-13-install_minikube/</guid><description>前置条件 mac os 10.13.6 Virtual Box 确认环境需求 Minikube 要求在 BIOS 中启用 VT-x / AMD-v 虚拟化， 要检查这是否在OSX / macOS上运行，请执行以下操作： sysctl -a | grep machdep.cpu.features | grep VMX 如果有输</description></item><item><title>Shell命令备注手册</title><link>https://colynn.github.io/2019-01-02-shell-notes/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-01-02-shell-notes/</guid><description>Sed 直接编辑文件 sed -i &amp;#39;s/abc/xxx/g&amp;#39; file sed -i &amp;#39;/$xxx.*$/d&amp;#39; file 注: 仅仅工作在linux类型的主机上</description></item><item><title>运维常用命令备注手册</title><link>https://colynn.github.io/2019-01-01-ops-notes/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-01-01-ops-notes/</guid><description>Git fork出来的仓库同步upstream 在 fork 的代码库中添加上游代码库的 remote 源 git remote add upstream git@github.com:789/456.git 获取原始仓库分支和对应的提交 git fetch upstream 在本地实现与upstr</description></item><item><title>JS语法知识汇总</title><link>https://colynn.github.io/2019-08-19-js_base_summaring/</link><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-08-19-js_base_summaring/</guid><description>数据类型 var length = 7; // 数字 var lastName = &amp;#34;Gates&amp;#34;; // 字符串 var cars = [&amp;#34;Porsche&amp;#34;, &amp;#34;Volvo&amp;#34;, &amp;#34;BMW&amp;#34;]; // 数组 var x = {firstName:&amp;#34;Bill&amp;#34;, lastName:&amp;#34;Gates&amp;#34;}; // 对象 var x = true; // 布尔值 var y = false; //布尔值 数组 some The some() method checks if any of the elements in an array pass a</description></item><item><title>PyCharm 开发环境设置</title><link>https://colynn.github.io/2019-09-26-pycharm_env_setting/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-09-26-pycharm_env_setting/</guid><description>运行环境 Mac OS 10.13.6 PyCharm 2018.1 确认代码检查规范 当前文件-快速格式化代码 (option + command + l) 代码注释方式 - 支持 google/ reStructuredText 等 定义-文件/代码模板</description></item><item><title>小程序实践归档</title><link>https://colynn.github.io/2019-08-19-mp_login_recommend_practice/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-08-19-mp_login_recommend_practice/</guid><description>登录-推荐实践 登录-实现原则 小程序与开发服务器端通过 3rd_session（第三方session）【即自定义登录状态】来实现通信，微信官方也</description></item></channel></rss>