<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Colynn.Liu</title><link>https://colynn.github.io/tags/go/</link><description>Recent content in go on Colynn.Liu</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 06 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://colynn.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Slice 内部发生了什么</title><link>https://colynn.github.io/2020-05-06-slice-internal/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-05-06-slice-internal/</guid><description>前言 Go&amp;rsquo;s Slice类型为处理类型化数据序列提供了一种方便且高效的方法。 Slice internals slice是一个array片段的描述符，它包含一个指向数组的指针，版</description></item><item><title>如何让你的Go代码更规范 - 辅助工具/项目结构/代码规范</title><link>https://colynn.github.io/2020-03-29-golang-101/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-29-golang-101/</guid><description>前言 应云而生的go语言，给我们带来了很多的不错的特性，但是如何让go代码更规范，更优雅，期望可以给你些许帮助。 作者对于golang也是在不断</description></item><item><title>Using Makefile for Go - Go语言项目如何正确使用Makefile</title><link>https://colynn.github.io/2020-03-03-using_makefile/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-03-using_makefile/</guid><description>我们一直在用Go语言编写的HackerRank项目中的一个项目使用make作为构建工具，并且效果良好。在这篇文章中，我将指出我们使用的GNU</description></item><item><title>Beego In Use</title><link>https://colynn.github.io/2020-03-03-beego_using/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-03-03-beego_using/</guid><description>时区问题 ORM 默认使用 time.Local 本地时区 作用于 ORM 自动创建的时间 从数据库中取回的时间转换成 ORM 本地时间 如果需要的话，你也可以进行更改 // 设置为 UTC 时间 orm.DefaultTimeLoc = time.UTC ORM 在</description></item><item><title>VSCode 开发环境设置</title><link>https://colynn.github.io/2019-09-26-vscode_env_setting/</link><pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-09-26-vscode_env_setting/</guid><description>运行环境 Mac OS 10.13.6 VS code 1.31.1 快捷键 解读 General Command + Shift + p, F1 显示命令面板 Command + p 快速打开 Command + Shite + N 新建vscode 窗口 Integrated Terminal Ctrl + ` 显示或隐藏集成终端； Ctrl + Shift + `</description></item><item><title>Go Mod 包管理</title><link>https://colynn.github.io/2019-08-15-introducing_go_mod/</link><pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-08-15-introducing_go_mod/</guid><description>前言 In Go 1.11, a new tool has arrived. It&amp;rsquo;s called go mod. For those who don&amp;rsquo;t know what is that, I&amp;rsquo;ll tell you about it. One of the purposes of this tool is to get rid of $GOPATH, so you can git clone a Golang repository anywhere and work on it without worrying about $GOPATH at all. There are other purposes of course, such as simpler versioning and</description></item><item><title>Go语法汇总</title><link>https://colynn.github.io/2019-12-31-go_basic_knowledge_summarizing/</link><pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2019-12-31-go_basic_knowledge_summarizing/</guid><description>变量声明 指定变量类型，如果没有初始化，则变量默认为零值; package main import &amp;#34;fmt&amp;#34; func main() { // 声明一个变量并初始化 var a = &amp;#34;RUNOOB&amp;#34; fmt.Println(a) // 没有初始化就为零值 var b int fmt.Println(b) // bool 零值为</description></item></channel></rss>