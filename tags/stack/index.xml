<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stack on Colynn.Liu</title><link>https://colynn.github.io/tags/stack/</link><description>Recent content in Stack on Colynn.Liu</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 15 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://colynn.github.io/tags/stack/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang 内存分配 - stack and heap</title><link>https://colynn.github.io/2020-07-16-go-memory-allocation/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><guid>https://colynn.github.io/2020-07-16-go-memory-allocation/</guid><description>&lt;h2>&lt;/h2>
&lt;p>&lt;a href="https://golang.org/doc/faq#stack_or_heap">https://golang.org/doc/faq#stack_or_heap&lt;/a>&lt;/p>
&lt;h2 id="stack-and-pointers">stack and pointers&lt;/h2>
&lt;p>我不能解释地像 &lt;a href="https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html">William Kennedy&lt;/a>一样优秀，那就让我来做一个汇总.&lt;/p>
&lt;p>一个变量可以被分配在 &lt;code>heap&lt;/code>或是&lt;code>stack&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>The stack contains the &lt;strong>ongoing&lt;/strong> variables for a given goroutine. Once a function returned, the variables are popped from the stack.&lt;/li>
&lt;li>The heap contains the shared variables (global variables, etc.), and anything on the heap is maaged by the Garbage Collector.&lt;/li>
&lt;/ol>
&lt;p>简而言之，当你需要&lt;code>Sharing&lt;/code>变量，可以使用指针；&lt;/p></description></item></channel></rss>